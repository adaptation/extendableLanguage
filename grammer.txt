start = program

program = TERMINATOR? _ b:block

block = s:statement ss:(_ TERMINATOR _ statement)* TERMINATOR?

statement = ex:expressionworthy / conditional / return

expressionworthy = ABExpr / call / func
ABExpr = assignExpr / binaryExpr

func = params:("(" _ args? _ ")" _ )? "->" _ body:funcBody?
args = a:identifier as:(_ "," _ identifier )*
//preprocessor DEDENT -> DEDENT TERM
funcBody = TERMINDENT b:block DEDENT TERM / s:statement

assignExpr = left:left _ "=" !"=" _ right:expressionworthy

call = fn:callee _ accesses:callAccesses
callee = left
callAccesses = al:argumentList
argumentList = "(" _ a:argumentListContents? _ ")"
argumentListContents = e:argument es:(_ "," _ argument)*
argument = binaryExpr / call

conditional = IF _ cond:ABExpr _ body:conditionalBody _ e:elseClause?
conditionalBody = b:funcBody
elseClause = TERMINATOR? _ ELSE b:elseBody
elseBody = funcBody

leftExpr = call / primary

return = RETURN _ e:expressionworthy?

binaryExpr = l:leftExpr r:( _ o:binaryOperator _ e:(expressionworthy / primary))*
binaryOperator = a:CompoundAssignmentOperators !"=" / "<=" / ">=" / "<" / ">" / "==" / "!="
CompoundAssignmentOperators = a:("&&" / "||" / [*/%] / e:"+" !"+" / e:"-" !"-")

primary = literal / left
literal = Number / bool
left = identifier

bool = TRUE/ FALSE

Number = integer

integer = "0" / head:[1-9] digits:decimalDigit*
decimalDigit = [0-9]

identifier = !reserved i:identifierName
identifierName = head:identifierStart tail:identifierPart*
identifierStart
  = UniLetter
  / [$_]
identifierPart
  = identifierStart
  / decimalDigit

UniLetter = [A-Za-z]


//keyword
IF = a:"if" !identifierPart
ELSE = a:"else" !identifierPart
RETURN = a:"return" !identifierPart

TRUE = a:"true" !identifierPart
FALSE = a:"false" !identifierPart

whiteSpace = [ ] / "\r" / s:("\\" "\r"? "\n")
_  = __?
__ = ws:whiteSpace+

INDENT = "\uEFEF"
DEDENT = ws:(TERMINATOR? _) "\uEFFE"
TERM = n:("\r"? "\n") / "\uEFFF"
TERMINATOR = t:(_ TERM)+
TERMINDENT = t:(TERMINATOR INDENT)

reserved = Keywords
Keywords
  = ("true" / "false" / "return" / "if" / "else") !identifierPart